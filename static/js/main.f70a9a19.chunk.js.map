{"version":3,"sources":["index.js"],"names":["Square","props","className","highlighted","onClick","value","Board","i","isWinningSquare","this","winningSquares","includes","key","squares","board","row","cols","col","push","renderSquare","generateBoard","React","Component","Game","state","history","Array","fill","moveLocation","xIsNext","stepNumber","historyAscending","slice","length","Math","floor","calculateWinner","player","setState","concat","step","status","current","winner","moves","map","move","desc","isCurrent","fontWeight","jumpTo","style","handleClick","handleHistorySort","reverse","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"iPAIA,SAASA,EAAOC,GACd,OACE,4BAAQC,UAAW,UAAYD,EAAME,YAAc,eAAiB,IAAKC,QAASH,EAAMG,SACrFH,EAAMI,O,IAKPC,E,2KACSC,GAAI,IAAD,OACRC,KAAmBC,KAAKR,MAAMS,iBAAkBD,KAAKR,MAAMS,eAAeC,SAASJ,IACzF,OAAO,kBAACP,EAAD,CACLY,IAAKL,EACLF,MAAOI,KAAKR,MAAMY,QAAQN,GAC1BH,QAAS,kBAAM,EAAKH,MAAMG,QAAQG,IAClCJ,YAAaK,M,sCAMf,IADA,IAAIM,EAAQ,GACHC,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAEhC,IADA,IAAIC,EAAO,GACFC,EAAM,EAAGA,EAAM,EAAGA,IACzBD,EAAKE,KAAKT,KAAKU,aAAiB,EAAJJ,EAAME,IAEpCH,EAAMI,KAAK,yBAAKN,IAAKG,EAAKb,UAAU,aAAac,IAEnD,OAAOF,I,+BAIP,OACE,6BACGL,KAAKW,gBADR,S,GAzBcC,IAAMC,WAgCpBC,E,kDACJ,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IAEDuB,MAAQ,CACXC,QAAS,CAAC,CACRZ,QAASa,MAAM,GAAGC,KAAK,MACvBC,aAAc,CAACX,IAAK,KAAMF,IAAK,QAEjCc,SAAS,EACTC,WAAY,EACZC,kBAAkB,GAVH,E,wDAcPxB,GACV,IAAMkB,EAAUhB,KAAKe,MAAMC,QAAQO,MAAM,EAAGvB,KAAKe,MAAMM,WAAa,GAE9DjB,EADUY,EAAQA,EAAQQ,OAAS,GACjBpB,QAAQmB,QAC1BJ,EAAe,CACnBX,IAAKV,EAAI,EAAI,EACbQ,IAAKmB,KAAKC,MAAM5B,EAAI,GAAK,GAEvB6B,EAAgBvB,GAASwB,QAAUxB,EAAQN,KAC/CM,EAAQN,GAAKE,KAAKe,MAAMK,QAAU,IAAM,IACxCpB,KAAK6B,SAAS,CACZb,QAASA,EAAQc,OAAO,CAAC,CAAC1B,QAASA,EAASe,aAAcA,KAC1DC,SAAUpB,KAAKe,MAAMK,QACrBC,WAAYL,EAAQQ,Y,6BAIjBO,GACL/B,KAAK6B,SAAS,CACZR,WAAYU,EACZX,QAAUW,EAAO,IAAO,M,0CAK1B/B,KAAK6B,SAAS,CACZP,kBAAmBtB,KAAKe,MAAMO,qB,+BAIxB,IAqBJU,EArBG,OACHhB,EAAUhB,KAAKe,MAAMC,QACnBiB,EAAUjB,EAAQhB,KAAKe,MAAMM,YAC7Ba,EAASP,EAAgBM,EAAQ7B,SAASwB,OAE1CO,EAAQnB,EAAQoB,KAAI,SAACL,EAAMM,GAC/B,IAAMC,EAAOD,EACX,eAAiBA,EAAjB,gBAAiCN,EAAKZ,aAAaX,IAAnD,iBAA+DuB,EAAKZ,aAAab,IAAjF,KACA,mBACIiC,EAAa,EAAKxB,MAAMM,aAAegB,EAC3C,CAACG,WAAY,QACb,CAACA,WAAY,UACf,OACE,wBAAIrC,IAAKkC,GACP,4BAAQ1C,QAAS,kBAAM,EAAK8C,OAAOJ,IAAOK,MAAOH,GAC9CD,OAcT,OANEN,EADEE,EACO,WAAaA,EACflB,EAAQQ,OAAS,EACf,gBAEA,iBAAmBxB,KAAKe,MAAMK,QAAU,IAAK,KAGtD,yBAAK3B,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACI,EAAD,CACEI,eAAgB0B,EAAgBM,EAAQ7B,SAASH,eACjDG,QAAS6B,EAAQ7B,QACjBT,QAAS,SAACG,GAAD,OAAO,EAAK6C,YAAY7C,OAGrC,yBAAKL,UAAU,aACb,6BAAMuC,GACN,6BACA,4BAAQrC,QAAS,kBAAM,EAAKiD,sBAA5B,8BAC8B5C,KAAKe,MAAMO,iBAAmB,YAAc,aAD1E,KAGA,4BAAKtB,KAAKe,MAAMO,iBAAmBa,EAAQA,EAAMU,iB,GAzFxCjC,IAAMC,WAuGzB,SAASc,EAAgBvB,GAWvB,IAVA,IAAM0C,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAhD,EAAI,EAAGA,EAAIgD,EAAMtB,OAAQ1B,IAAK,CAAC,IAAD,cACnBgD,EAAMhD,GADa,GAC9BiD,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAI7C,EAAQ2C,IAAM3C,EAAQ2C,KAAO3C,EAAQ4C,IAAM5C,EAAQ2C,KAAO3C,EAAQ6C,GACpE,MAAO,CAACrB,OAAQxB,EAAQ2C,GAAI9C,eAAgB6C,EAAMhD,IAGtD,MAAO,CAAC8B,OAAQ,KAAM3B,eAAgB,MAtBxCiD,IAASC,OACP,kBAACrC,EAAD,MACAsC,SAASC,eAAe,W","file":"static/js/main.f70a9a19.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className={\"square\" + (props.highlighted ? ' highlighted' : '')} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    const isWinningSquare = (this.props.winningSquares && this.props.winningSquares.includes(i)) ? true : false;\r\n    return <Square\r\n      key={i}\r\n      value={this.props.squares[i]}\r\n      onClick={() => this.props.onClick(i)}\r\n      highlighted={isWinningSquare}\r\n      />;\r\n  }\r\n\r\n  generateBoard() {\r\n    var board = [];\r\n    for (let row = 0; row < 3; row++) {\r\n      var cols = [];\r\n      for (let col = 0; col < 3; col++) {\r\n        cols.push(this.renderSquare(row*3+col));\r\n      }\r\n      board.push(<div key={row} className=\"board-row\">{cols}</div>);\r\n    }\r\n    return board;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.generateBoard()};\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n        moveLocation: {col: null, row: null}\r\n      }],\r\n      xIsNext: true,\r\n      stepNumber: 0,\r\n      historyAscending: true,\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    const moveLocation = {\r\n      col: i % 3 + 1,\r\n      row: Math.floor(i / 3) + 1,\r\n    }\r\n    if (calculateWinner(squares).player || squares[i]) return;\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{squares: squares, moveLocation: moveLocation}]),\r\n      xIsNext: !this.state.xIsNext,\r\n      stepNumber: history.length,\r\n    });\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    })\r\n  }\r\n\r\n  handleHistorySort() {\r\n    this.setState({\r\n      historyAscending: !this.state.historyAscending,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    var history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares).player;\r\n    \r\n    const moves = history.map((step, move) => {\r\n      const desc = move ?\r\n        'Go to move #' + move + ` (col:${step.moveLocation.col}, row:${step.moveLocation.row})`:\r\n        'Go to game start';\r\n      const isCurrent = (this.state.stepNumber === move) ? \r\n        {fontWeight: 'bold'} : \r\n        {fontWeight: 'normal'};\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)} style={isCurrent}>\r\n            {desc}\r\n          </button>\r\n        </li>\r\n      )\r\n    })\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner: ' + winner;\r\n    }else if(history.length > 9){\r\n      status = 'It is a draw!'\r\n    }else{\r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X': 'O');\r\n    }\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board \r\n            winningSquares={calculateWinner(current.squares).winningSquares}\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <br></br>\r\n          <button onClick={() => this.handleHistorySort()}>\r\n            Toggle Move History Order ({this.state.historyAscending ? 'Ascending' : 'Descending'})\r\n          </button>\r\n          <ol>{this.state.historyAscending ? moves : moves.reverse()}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return {player: squares[a], winningSquares: lines[i]};\r\n    }\r\n  }\r\n  return {player: null, winningSquares: null};\r\n}\r\n"],"sourceRoot":""}